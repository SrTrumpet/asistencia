# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserEntity {
  id: ID!
  firstName: String!
  lastName: String!
  rut: String!
  email: String!
  role: UserRoles!
}

"""The roles a user can have in the system"""
enum UserRoles {
  Student
  Teacher
  Admin
}

type UserWithAttendanceDto {
  user: UserEntity!
  totalAsist: Float!
  totalAbsences: Float!
}

"""La entidad Subject que representa una asignatura"""
type SubjectEntity {
  id: ID!
  name: String!
  numberOfClasses: Float!
}

type AuthResponse {
  message: String!
  token: String!
}

type Query {
  """Obtiene los usuarios y su asistencia por asignatura"""
  listUsersBySubject(idSubject: Float!): [UserWithAttendanceDto!]!

  """Busca un usuario por RUT"""
  findByRut(rut: String!): UserEntity!
  getAllUser: [UserEntity!]!
  listSubject: [SubjectEntity!]!
}

type Mutation {
  """Marca la asistencia de los estudiantes"""
  takeAsist(createAsistInput: CreateAsistDto!): Boolean!

  """Create a new user (either student or teacher)"""
  createUser(createUserDto: CreateUserDto!): UserEntity!
  removeUser(rut: String!): Boolean!

  """Actualiza un usuario"""
  updateUser(rut: String!, updateUserDto: UpdateUserDto!): UserEntity!
  login(rut: String!, password: String!): AuthResponse!

  """Create a new subject by providing the name and number of classes."""
  createSubject(
    """
    The input data for creating a new subject, including name and number of classes.
    """
    createSubjectInput: CreateSubjectDto!
  ): SubjectEntity!

  """Remove a subject by its name. Returns true if deletion is successful."""
  removeSubject(
    """The name of the subject to delete."""
    name: String!
  ): Boolean!
  updateSubject(createSubjectInput: UpdateSubjectDto!): Boolean!
}

input CreateAsistDto {
  asistencias: [CreateAsistItemDto!]!
}

input CreateAsistItemDto {
  idUser: Float!
  idSubject: Float!
  asist: Float!
}

input CreateUserDto {
  firstName: String!
  lastName: String!
  rut: String!
  email: String!
  role: UserRoles!
  password: String!
}

input UpdateUserDto {
  firstName: String
  lastName: String
  email: String
}

input CreateSubjectDto {
  name: String!
  numberOfClasses: Int
}

input UpdateSubjectDto {
  name: String!
  newName: String
  numberOfClasses: Int
}